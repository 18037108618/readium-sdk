<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk/ePub3/utilities/byte_stream.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="Readium_Logo_64.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.16</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('byte__stream_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">byte_stream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="byte__stream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  byte_stream.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-02-05.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__byte_stream__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__byte_stream__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ePub3/epub3.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="ring__buffer_8h.xhtml">ePub3/utilities/ring_buffer.h</a>&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;ios&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="run__loop_8h.xhtml">ePub3/utilities/run_loop.h</a>&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="make__unique_8h.xhtml">ePub3/utilities/make_unique.h</a>&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">struct </span>zip;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">struct </span>zip_file;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">//#include &quot;iri.h&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;google-url/url_canon.h&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;google-url/url_util.h&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">static</span> <span class="keywordtype">string</span> Sanitized(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span> ( path.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(<span class="stringliteral">&quot;%&quot;</span>) != std::string::npos )</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        url_canon::RawCanonOutputW&lt;256&gt; output;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// note that std::string .size() is the same as</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="comment">// ePub3:string .utf8_size() defined in utfstring.h (equivalent to strlen(str.c_str()) ),</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// but not the same as ePub3:string .size() !!</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">// WATCH OUT!</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        url_util::DecodeURLEscapeSequences(path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(path.<a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">utf8_size</a>()), &amp;output);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">string</span> path_(output.data(), output.length());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> ( path_.find(<span class="charliteral">&#39;/&#39;</span>) == 0 )</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">return</span> path_.substr(1);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">return</span> path_;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> ( path.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(<span class="charliteral">&#39;/&#39;</span>) == 0 )</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">return</span> path.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(1);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> path;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml">   78</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_byte_stream.xhtml">ByteStream</a></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d">   83</a></span>&#160;    <span class="keyword">typedef</span> std::size_t             <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    </div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a3317ab854f9efd7ccfc88a1fa81737ac">   87</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>          <a class="code" href="class_byte_stream.xhtml#a3317ab854f9efd7ccfc88a1fa81737ac" title="A value to be returned when a real count is not possible.">UnknownSize</a> = 0;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a9fedbe553d35af2508bbedbb38d63c5c">   90</a></span>&#160;                             <a class="code" href="class_byte_stream.xhtml#a9fedbe553d35af2508bbedbb38d63c5c">ByteStream</a>() : <a class="code" href="class_byte_stream.xhtml#a0c4605504151f03c72b82c27e45ac4e8" title="Whether the end of a finite-length data stream has been reached.">_eof</a>(false), <a class="code" href="class_byte_stream.xhtml#abac9a25e506ba5441b9fec01104c0aa1" title="Any system error which has occurred on this stream.">_err</a>(0)    {}</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a21b57a40d287c38f69a33dc763489344">   91</a></span>&#160;    <span class="keyword">virtual</span>                 <a class="code" href="class_byte_stream.xhtml#a21b57a40d287c38f69a33dc763489344">~ByteStream</a>()                           {}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                            <a class="code" href="class_byte_stream.xhtml#a9fedbe553d35af2508bbedbb38d63c5c">ByteStream</a>(<span class="keyword">const</span> <a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;)           <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                            <a class="code" href="class_byte_stream.xhtml">ByteStream</a>(<a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;&amp;)                _DELETED_;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;             operator=(const <a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;)            _DELETED_;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;             operator=(<a class="code" href="class_byte_stream.xhtml">ByteStream</a>&amp;&amp; o)               _DELETED_;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;public:</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#af60b14017c1086dd9f5c78c994ab1b2e">  104</a></span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_byte_stream.xhtml#af60b14017c1086dd9f5c78c994ab1b2e" title="Returns the number of bytes that can be read at this time.">BytesAvailable</a>()                        const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  { <span class="keywordflow">return</span> <a class="code" href="class_byte_stream.xhtml#a3317ab854f9efd7ccfc88a1fa81737ac" title="A value to be returned when a real count is not possible.">UnknownSize</a>; }</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a5a7541f3d6d236dec09df42b8ba09a1d">  107</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_byte_stream.xhtml#a5a7541f3d6d236dec09df42b8ba09a1d" title="Returns the amount of space available for writing at this time.">SpaceAvailable</a>()                        const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  { <span class="keywordflow">return</span> <a class="code" href="class_byte_stream.xhtml#a3317ab854f9efd7ccfc88a1fa81737ac" title="A value to be returned when a real count is not possible.">UnknownSize</a>; }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>            <a class="code" href="class_byte_stream.xhtml#a09ba1e5c736885e30c6764ca8bbe6c33">IsOpen</a>()                                const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  = 0;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    virtual <span class="keywordtype">void</span>            <a class="code" href="class_byte_stream.xhtml#a664260c953580771b66a334ce944ad27" title="Close the stream.">Close</a>()                                                 = 0;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_byte_stream.xhtml#a409c3b6a11b07d0d936fb7c8521a3638">ReadBytes</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)                     = 0;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_byte_stream.xhtml#abc960f52b9bdaf2fde37f03148e1ede4">WriteBytes</a>(const <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)              = 0;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    </div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a4a2fbfb1a81c144c1bc8e4458f571aee">  137</a></span>&#160;    virtual <span class="keywordtype">bool</span>            <a class="code" href="class_byte_stream.xhtml#a4a2fbfb1a81c144c1bc8e4458f571aee" title="Returns true if an EOF status has occurred.">AtEnd</a>()                                 const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  { <span class="keywordflow">return</span> <a class="code" href="class_byte_stream.xhtml#a0c4605504151f03c72b82c27e45ac4e8" title="Whether the end of a finite-length data stream has been reached.">_eof</a>; }</div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a4fe01bf8b41de060fd2ba416130cbcc4">  140</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span>             <a class="code" href="class_byte_stream.xhtml#a4fe01bf8b41de060fd2ba416130cbcc4" title="Returns any error code reported by the underlying system.">Error</a>()                                 const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  { <span class="keywordflow">return</span> <a class="code" href="class_byte_stream.xhtml#abac9a25e506ba5441b9fec01104c0aa1" title="Any system error which has occurred on this stream.">_err</a>; }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#a0c4605504151f03c72b82c27e45ac4e8">  143</a></span>&#160;    <span class="keywordtype">bool</span>                    <a class="code" href="class_byte_stream.xhtml#a0c4605504151f03c72b82c27e45ac4e8" title="Whether the end of a finite-length data stream has been reached.">_eof</a>;   </div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="code" href="class_byte_stream.xhtml#abac9a25e506ba5441b9fec01104c0aa1">  144</a></span>&#160;    <span class="keywordtype">int</span>                     <a class="code" href="class_byte_stream.xhtml#abac9a25e506ba5441b9fec01104c0aa1" title="Any system error which has occurred on this stream.">_err</a>;   </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;};</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">enum class</span> <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> AsyncEvent : uint8_t</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    None,                   </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    OpenCompleted,          </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    HasBytesAvailable,      </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    HasSpaceAvailable,      </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    ErrorOccurred,          </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    EndEncountered          </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;};</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">class </span>AsyncByteStream;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_ALIAS_TEMPLATES)</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor"></span><span class="keyword">using</span> StreamEventHandler = std::function&lt;void(AsyncEvent, AsyncByteStream*)&gt;;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor"></span><span class="keyword">typedef</span> std::function&lt;void(AsyncEvent, AsyncByteStream*)&gt; StreamEventHandler;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">class </span>InvalidDuplexStreamOperationError : <span class="keyword">public</span> std::logic_error</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> InvalidDuplexStreamOperationError(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str) : std::logic_error(str.stl_str()) {}</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> InvalidDuplexStreamOperationError(<span class="keyword">const</span> <span class="keywordtype">char</span>* str) : std::logic_error(str) {}</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> ~InvalidDuplexStreamOperationError() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;};</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">class </span>AsyncByteStream : <span class="keyword">public</span> <a class="code" href="class_byte_stream.xhtml">ByteStream</a></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">typedef</span> uint8_t             ThreadEvent;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> ThreadEvent    Wait                    = 0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> ThreadEvent    ReadSpaceAvailable      = 1 &lt;&lt; 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> ThreadEvent    DataToWrite             = 1 &lt;&lt; 1;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> ThreadEvent    Exceptional             = 1 &lt;&lt; 2;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">typedef</span> std::chrono::duration&lt;double&gt;   timeout_type;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">typedef</span> std::function&lt;void(RunLoopPtr, AsyncByteStream*)&gt; StreamScheduledHandler;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>                AsyncByteStream(size_type bufsize=4096);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>                AsyncByteStream(StreamEventHandler handler, size_type bufsize=4096);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">virtual</span>                     ~AsyncByteStream();</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                AsyncByteStream(<span class="keyword">const</span> AsyncByteStream&amp;)         <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                AsyncByteStream(AsyncByteStream&amp;&amp;)              _DELETED_;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    AsyncByteStream&amp;            operator=(const AsyncByteStream&amp;)               _DELETED_;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    AsyncByteStream&amp;            operator=(AsyncByteStream&amp;&amp;)                    _DELETED_;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;public:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    StreamEventHandler          GetEventHandler()                   const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> _eventHandler; }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordtype">void</span>                        SetEventHandler(StreamEventHandler handler) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { _eventHandler = handler; }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    AsyncEvent                  WaitNextEvent(timeout_type timeout=timeout_type::max());</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="_forward_8h.xhtml#a0d88f76e5f51a60c95a53714587c88da">RunLoopPtr</a>            EventTargetRunLoop()                const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> _targetRunLoop; }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                SetTargetRunLoop(<a class="code" href="_forward_8h.xhtml#a0d88f76e5f51a60c95a53714587c88da">RunLoopPtr</a> rl)             <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    StreamScheduledHandler      GetScheduledHandler()               const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> _streamScheduled;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">void</span>                        SetScheduledHandler(StreamScheduledHandler handler) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        _streamScheduled = handler;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">virtual</span> size_type           <a class="code" href="class_byte_stream.xhtml#af60b14017c1086dd9f5c78c994ab1b2e" title="Returns the number of bytes that can be read at this time.">BytesAvailable</a>()                    const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> (_readbuf ? _readbuf-&gt;BytesAvailable() : 0);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">virtual</span> size_type           <a class="code" href="class_byte_stream.xhtml#a5a7541f3d6d236dec09df42b8ba09a1d" title="Returns the amount of space available for writing at this time.">SpaceAvailable</a>()                    const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>  {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> (_writebuf ? _writebuf-&gt;SpaceAvailable() : 0);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                Open(std::ios::openmode mode = std::ios::in|std::ios::out);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="class_byte_stream.xhtml#a664260c953580771b66a334ce944ad27" title="Close the stream.">Close</a>();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">virtual</span> size_type           <a class="code" href="class_byte_stream.xhtml#a409c3b6a11b07d0d936fb7c8521a3638">ReadBytes</a>(<span class="keywordtype">void</span>* buf, size_type len);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">virtual</span> size_type           <a class="code" href="class_byte_stream.xhtml#abc960f52b9bdaf2fde37f03148e1ede4">WriteBytes</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, size_type len);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    size_type                   _bufsize;           </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    shared_ptr&lt;RingBuffer&gt;      _readbuf;           </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    shared_ptr&lt;RingBuffer&gt;      _writebuf;          </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    StreamEventHandler          _eventHandler;      </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    std::atomic_flag            _closing;           </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">static</span> std::thread          _asyncIOThread;     </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">static</span> <a class="code" href="_forward_8h.xhtml#a0d88f76e5f51a60c95a53714587c88da">RunLoopPtr</a>           _asyncRunLoop;      </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">static</span> std::atomic_flag     _asyncInited;       </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">RunLoop::EventSourcePtr</a>     _eventSource;       </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    std::atomic&lt;ThreadEvent&gt;    _event;             </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="_forward_8h.xhtml#a0d88f76e5f51a60c95a53714587c88da">RunLoopPtr</a>                  _targetRunLoop;     </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">RunLoop::EventSourcePtr</a>     _eventDispatchSource;   </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    StreamScheduledHandler      _streamScheduled;   </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// The AsyncPipe class wants to assign the buffers itself.</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>AsyncPipe;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                InitAsyncHandler();</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">RunLoop::EventSourcePtr</a> AsyncEventSource();</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">RunLoop::EventSourcePtr</a> EventDispatchSource();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">virtual</span> size_type           read_for_async(<span class="keywordtype">void</span>* buf, size_type len)        = 0;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">virtual</span> size_type           write_for_async(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, size_type len) = 0;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">void</span>                        ReadyToRun();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;};</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">class </span>AsyncPipe : <span class="keyword">public</span> AsyncByteStream</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">typedef</span> std::pair&lt;std::shared_ptr&lt;AsyncPipe&gt;, std::shared_ptr&lt;AsyncPipe&gt;&gt; Pair;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">static</span> Pair LinkedPair(size_type bufsize=4096);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// The real constructor should be considered protected. Use Pair() to get a pipe.</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    AsyncPipe(size_type bufsize=4096) : AsyncByteStream(bufsize), _counterpart(), _self_closed(false), _pair_closed(false) {}</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    ~AsyncPipe();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    AsyncPipe(<span class="keyword">const</span> AsyncPipe&amp;)                 <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    AsyncPipe(AsyncPipe&amp;&amp;)                      _DELETED_;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    AsyncPipe&amp;                  operator=(const AsyncPipe&amp;)               _DELETED_;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    AsyncPipe&amp;                  operator=(AsyncPipe&amp;&amp;)                    _DELETED_;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;protected:</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    virtual <span class="keywordtype">void</span> Open(std::ios::openmode mode=std::ios::in|std::ios::out) {</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        _self_closed = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        AsyncByteStream::Open(mode);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                Close() <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    virtual <span class="keywordtype">bool</span>                IsOpen() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a> { <span class="keywordflow">return</span> !_self_closed; }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                SetTargetRunLoop(<a class="code" href="_forward_8h.xhtml#a0d88f76e5f51a60c95a53714587c88da">RunLoopPtr</a> rl) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">virtual</span> size_type           ReadBytes(<span class="keywordtype">void</span>* buf, size_type len) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">virtual</span> size_type           WriteBytes(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, size_type len) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    std::weak_ptr&lt;AsyncPipe&gt;    _counterpart;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordtype">bool</span>                        _self_closed;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordtype">bool</span>                        _pair_closed;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">// These do nothing here -- all the action is in this class&#39;s implementation of</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="comment">//  InitAsyncHandler()</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">virtual</span> size_type read_for_async(<span class="keywordtype">void</span>* buf, size_type len);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">virtual</span> size_type write_for_async(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, size_type len);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">RunLoop::EventSourcePtr</a> AsyncEventSource();</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                CounterpartClosed();</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;};</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="code" href="class_seekable_byte_stream.xhtml">  430</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> : <span class="keyword">public</span> <a class="code" href="class_byte_stream.xhtml">ByteStream</a></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="code" href="class_seekable_byte_stream.xhtml#a76eda62e83013d8e3fd2fa7a50a6ccfd">  433</a></span>&#160;    <a class="code" href="class_seekable_byte_stream.xhtml#a76eda62e83013d8e3fd2fa7a50a6ccfd">SeekableByteStream</a>() : <a class="code" href="class_byte_stream.xhtml">ByteStream</a>() {}</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="code" href="class_seekable_byte_stream.xhtml#a98c9a5b9f2d487bd7740478893df8c3e">  434</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_seekable_byte_stream.xhtml#a98c9a5b9f2d487bd7740478893df8c3e">~SeekableByteStream</a>() {}</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="code" href="class_seekable_byte_stream.xhtml#a749660095841fa8d622a07b13ccc0557">  444</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_seekable_byte_stream.xhtml#a749660095841fa8d622a07b13ccc0557">Seek</a>(<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> by, std::ios::seekdir dir) { <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_seekable_byte_stream.xhtml#a0f68529e67707052869c6b954400f305">Position</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="code" href="class_seekable_byte_stream.xhtml#a0922a853bbf0e2469a8344d3164c7d12">  455</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>            <a class="code" href="class_seekable_byte_stream.xhtml#a0922a853bbf0e2469a8344d3164c7d12">Flush</a>() {}</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keyword">virtual</span> std::shared_ptr&lt;SeekableByteStream&gt; <a class="code" href="class_seekable_byte_stream.xhtml#ab1881a0e688aab8d936d5f876087ae39">Clone</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;};</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno"><a class="code" href="class_file_byte_stream.xhtml">  470</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a> : <span class="keyword">public</span> <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;{</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689">  475</a></span>&#160;                            <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>()                        : <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a>(), <a class="code" href="class_file_byte_stream.xhtml#ac484bd4adbc43a44b95ee3f3145358ec" title="The underlying system file stream.">_file</a>(nullptr) {}</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>            <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; pathToOpen, std::ios::openmode mode = std::ios::in | std::ios::out);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">virtual</span>                 <a class="code" href="class_file_byte_stream.xhtml#a795aa40f0e0126ff5ca8b487b8a84cc5">~FileByteStream</a>();</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>(<span class="keyword">const</span> <a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp; o)             <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                            <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>(<a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp;&amp; o)                  <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp;         operator=(<a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp;)                          _DELETED_;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp;         operator=(<a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>&amp;&amp;)                         _DELETED_;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    </div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;public:</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a6e8fe7db2659f9c6250639fa8d2c55cc" title="Returns the number of bytes that can be read at this time. ">BytesAvailable</a>()                        const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a1f846ec9d99dceebf27e92737e358a68" title="Returns the amount of space available for writing at this time. ">SpaceAvailable</a>()                        const _NOEXCEPT;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    virtual <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#aab92564fc799b55f7adbf43fac5bd761">IsOpen</a>()                                const _NOEXCEPT;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    virtual <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#ad0253765b4168ccd41b79a1a9e5be858">Open</a>(const <span class="keywordtype">string</span>&amp; path, std::ios::openmode mode = std::ios::in | std::ios::out);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    virtual <span class="keywordtype">void</span>            <a class="code" href="class_file_byte_stream.xhtml#a0cb7c0433d5aaf57339324ad4096a8ca" title="Close the stream. ">Close</a>();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a43fdc1344153ab03c466f3a20443d058">ReadBytes</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a58a7ff7c2b7278d585cf028cb0b63875">WriteBytes</a>(const <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#ad80913397b9e18c90adae3d29cc3fc81">Seek</a>(<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> by, std::ios::seekdir dir) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a15ce1f64935f330a8cc625bc2e156317">Position</a>() const OVERRIDE;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    virtual <span class="keywordtype">void</span>            <a class="code" href="class_file_byte_stream.xhtml#afc1d90e8e724fff2ae01b279ccd3481f">Flush</a>() OVERRIDE;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    virtual std::shared_ptr&lt;<a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a>&gt; <a class="code" href="class_file_byte_stream.xhtml#a343670cd3f8ee2d7d70d1eff252c6ca2">Clone</a>() const OVERRIDE;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;protected:</div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="code" href="class_file_byte_stream.xhtml#ac484bd4adbc43a44b95ee3f3145358ec">  551</a></span>&#160;    FILE*                   <a class="code" href="class_file_byte_stream.xhtml#ac484bd4adbc43a44b95ee3f3145358ec" title="The underlying system file stream.">_file</a>;  </div>
<div class="line"><a name="l00552"></a><span class="lineno"><a class="code" href="class_file_byte_stream.xhtml#a8259824e7de435de3d468760d72fd2dd">  552</a></span>&#160;    std::ios::openmode      <a class="code" href="class_file_byte_stream.xhtml#a8259824e7de435de3d468760d72fd2dd" title="The mode used to open the file (used by Clone()).">_mode</a>;  </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;};</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="code" href="class_zip_file_byte_stream.xhtml">  559</a></span>&#160;class <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a> : public <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;{</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="code" href="class_zip_file_byte_stream.xhtml#a1dc7817cc70616c0249d296692a75711">  564</a></span>&#160;                            <a class="code" href="class_zip_file_byte_stream.xhtml#a1dc7817cc70616c0249d296692a75711" title="Create a new unattached stream.">ZipFileByteStream</a>() : SeekableByteStream(), _file(nullptr) {}</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>            <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>(<span class="keyword">struct</span> zip* archive, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; pathToOpen, <span class="keywordtype">int</span> zipFlags=0);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keyword">virtual</span>                 ~<a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                            <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>(<span class="keyword">const</span> <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;)         _DELETED_;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                            <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>(<a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;&amp;)              _DELETED_;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;      operator=(const <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;)                 _DELETED_;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;      operator=(<a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>&amp;&amp;)                      _DELETED_;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;public:</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a6e8fe7db2659f9c6250639fa8d2c55cc" title="Returns the number of bytes that can be read at this time. ">BytesAvailable</a>()                        const _NOEXCEPT;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a1f846ec9d99dceebf27e92737e358a68" title="Returns the amount of space available for writing at this time. ">SpaceAvailable</a>()                        const _NOEXCEPT;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    virtual <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#aab92564fc799b55f7adbf43fac5bd761">IsOpen</a>()                                const _NOEXCEPT;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    virtual <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#ad0253765b4168ccd41b79a1a9e5be858">Open</a>(struct zip* archive, const <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">int</span> zipFlags=0);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    virtual <span class="keywordtype">void</span>            Close();</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    </div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a43fdc1344153ab03c466f3a20443d058">ReadBytes</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a58a7ff7c2b7278d585cf028cb0b63875">WriteBytes</a>(const <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    </div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#ad80913397b9e18c90adae3d29cc3fc81">Seek</a>(<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> by, std::ios::seekdir dir) OVERRIDE;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a15ce1f64935f330a8cc625bc2e156317">Position</a>() const OVERRIDE;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    virtual std::shared_ptr&lt;SeekableByteStream&gt; <a class="code" href="class_file_byte_stream.xhtml#a343670cd3f8ee2d7d70d1eff252c6ca2">Clone</a>() const OVERRIDE;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    </div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;protected:</div>
<div class="line"><a name="l00635"></a><span class="lineno"><a class="code" href="class_zip_file_byte_stream.xhtml#a1881d1eac71b6a66ad17d01aaadcb45c">  635</a></span>&#160;    struct zip_file*        _file;      </div>
<div class="line"><a name="l00636"></a><span class="lineno"><a class="code" href="class_zip_file_byte_stream.xhtml#aa562ed18e8b13bedadb3bc7b829d61a3">  636</a></span>&#160;    std::ios::openmode      _mode;      </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;};</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keyword">class </span>AsyncFileByteStream : <span class="keyword">public</span> AsyncByteStream, <span class="keyword">public</span> <a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;{</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="class_file_byte_stream.xhtml">FileByteStream</a>  __F;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keyword">typedef</span> AsyncByteStream __A;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                            <span class="comment">//AsyncFileByteStream() : AsyncByteStream(), FileByteStream() {}</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    </div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                            AsyncFileByteStream(<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> bufsize=4096) : AsyncByteStream(bufsize), <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>() {}</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                            AsyncFileByteStream(StreamEventHandler handler, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> bufsize=4096) : AsyncByteStream(handler, bufsize), <a class="code" href="class_file_byte_stream.xhtml#a9eaec30bef20e3a78654413cc9c51689" title="Create a new stream unassociated with any file.">FileByteStream</a>() {}</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                            AsyncFileByteStream(StreamEventHandler handler, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, std::ios::openmode mode = std::ios::in | std::ios::out, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> bufsize=4096);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keyword">virtual</span>                 ~AsyncFileByteStream() {}</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                            AsyncFileByteStream(<span class="keyword">const</span> AsyncFileByteStream&amp;) <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            AsyncFileByteStream(AsyncFileByteStream&amp;&amp;)      <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    AsyncFileByteStream&amp;    operator=(<span class="keyword">const</span> AsyncFileByteStream&amp;)           <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    AsyncFileByteStream&amp;    operator=(AsyncFileByteStream&amp;&amp;)                <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="comment">// use the ringbuffer-based availability functions from AsyncByteStream</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a6e8fe7db2659f9c6250639fa8d2c55cc" title="Returns the number of bytes that can be read at this time. ">BytesAvailable</a>()    <span class="keyword">const</span> _NOEXCEPT              { <span class="keywordflow">return</span> __A::BytesAvailable(); }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a1f846ec9d99dceebf27e92737e358a68" title="Returns the amount of space available for writing at this time. ">SpaceAvailable</a>()    <span class="keyword">const</span> _NOEXCEPT              { <span class="keywordflow">return</span> __A::SpaceAvailable(); }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// use the file stream&#39;s IsOpen()</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#aab92564fc799b55f7adbf43fac5bd761">IsOpen</a>()            <span class="keyword">const</span> _NOEXCEPT              { <span class="keywordflow">return</span> __F::IsOpen(); }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// use the async stream&#39;s read/writers</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a43fdc1344153ab03c466f3a20443d058">ReadBytes</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)             { <span class="keywordflow">return</span> __A::ReadBytes(buf, len); }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a58a7ff7c2b7278d585cf028cb0b63875">WriteBytes</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)      { <span class="keywordflow">return</span> __A::WriteBytes(buf, len); }</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    </div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#ad0253765b4168ccd41b79a1a9e5be858">Open</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, std::ios::openmode mode = std::ios::in | std::ios::out);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>            <a class="code" href="class_file_byte_stream.xhtml#a0cb7c0433d5aaf57339324ad4096a8ca" title="Close the stream. ">Close</a>();</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">virtual</span> std::shared_ptr&lt;SeekableByteStream&gt; <a class="code" href="class_file_byte_stream.xhtml#a343670cd3f8ee2d7d70d1eff252c6ca2">Clone</a>() <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="comment">// seeking disabled on async streams, because I value my sanity</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#ad80913397b9e18c90adae3d29cc3fc81">Seek</a>()                                          { <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       read_for_async(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)        { <span class="keywordflow">return</span> __F::ReadBytes(buf, len); }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       write_for_async(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len) { <span class="keywordflow">return</span> __F::WriteBytes(buf, len); }</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;};</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="keyword">class </span>AsyncZipFileByteStream : <span class="keyword">public</span> AsyncByteStream, <span class="keyword">public</span> <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;{</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>   __F;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">typedef</span> AsyncByteStream     __A;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    </div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                            AsyncZipFileByteStream() : AsyncByteStream(), <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>() {}</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    </div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                            AsyncZipFileByteStream(<span class="keyword">struct</span> zip* archive, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">int</span> zipFlags=0);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                            AsyncZipFileByteStream(StreamEventHandler handler) : AsyncByteStream(handler), <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>() {}</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                            AsyncZipFileByteStream(StreamEventHandler handler, <span class="keyword">struct</span> zip* archive, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">int</span> zipFlags=0) : AsyncByteStream(handler), <a class="code" href="class_zip_file_byte_stream.xhtml">ZipFileByteStream</a>(archive, path, zipFlags) {}</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keyword">virtual</span>                 ~AsyncZipFileByteStream() {}</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    </div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                            AsyncZipFileByteStream(<span class="keyword">const</span> AsyncZipFileByteStream&amp;)   _DELETED_;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                            AsyncZipFileByteStream(AsyncZipFileByteStream&amp;&amp;)        _DELETED_;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    AsyncZipFileByteStream&amp; operator=(const AsyncZipFileByteStream&amp;)                _DELETED_;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    AsyncZipFileByteStream&amp; operator=(AsyncZipFileByteStream&amp;&amp;)                     _DELETED_;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    </div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;public:</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="comment">// use the ringbuffer-based availability functions from AsyncByteStream</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"></span>    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a6e8fe7db2659f9c6250639fa8d2c55cc" title="Returns the number of bytes that can be read at this time. ">BytesAvailable</a>()    const _NOEXCEPT              { <span class="keywordflow">return</span> __A::BytesAvailable(); }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a1f846ec9d99dceebf27e92737e358a68" title="Returns the amount of space available for writing at this time. ">SpaceAvailable</a>()    const _NOEXCEPT              { <span class="keywordflow">return</span> __A::SpaceAvailable(); }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="comment">// use the file stream&#39;s IsOpen()</span></div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#aab92564fc799b55f7adbf43fac5bd761">IsOpen</a>()            const _NOEXCEPT              { <span class="keywordflow">return</span> __F::IsOpen(); }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="comment">// use the async stream&#39;s read/writers</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a43fdc1344153ab03c466f3a20443d058">ReadBytes</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)             { <span class="keywordflow">return</span> __A::ReadBytes(buf, len); }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       <a class="code" href="class_file_byte_stream.xhtml#a58a7ff7c2b7278d585cf028cb0b63875">WriteBytes</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)      { <span class="keywordflow">return</span> __A::WriteBytes(buf, len); }</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    </div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>            <a class="code" href="class_file_byte_stream.xhtml#ad0253765b4168ccd41b79a1a9e5be858">Open</a>(<span class="keyword">struct</span> zip* archive, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">int</span> zipFlags=0) OVERRIDE;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    virtual <span class="keywordtype">void</span>            Close();</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    virtual std::shared_ptr&lt;SeekableByteStream&gt; <a class="code" href="class_file_byte_stream.xhtml#a343670cd3f8ee2d7d70d1eff252c6ca2">Clone</a>() const OVERRIDE;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    </div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;protected:</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    virtual <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       read_for_async(<span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)        { <span class="keywordflow">return</span> __F::ReadBytes(buf, len); }</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>       write_for_async(<span class="keyword">const</span> <span class="keywordtype">void</span>* buf, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len) { <span class="keywordflow">return</span> __F::WriteBytes(buf, len); }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;};</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__byte_stream__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="byte__stream_8h.xhtml">byte_stream.h</a></li>
    <li class="footer">Generated on Fri Mar 13 2015 14:10:50 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
